Flatten method without n: 

function flatten(){
    let res= [];
    function flat(val){
    for(let i=0;i<val.length;i++){
        if(Array.isArray(val[i])){
            flat(val[i])
        }
        else {
            res.push(val[i])
        }
    }}
    flat(this)
    console.log(res)
}
Array.prototype.flatten= flatten;
let arr =  [
  1, 2, 3,
   [4],
  [5, 6, [7], [8, [9, [10]]]],
  11, 12, 13,
  [14, [[[[[15, [16]]]]]]],
  17, 18,
  [19, [20, [21, [22, [23, [24, [[[[[25]]]]]]]]]]]
 ]
 arr.flatten();
 ---------------------------------------------------------------------------------------------------
 Pollyfill method with N: 
 
 function flatten(n){
    let res= [];
    function flat(val,n){
    for(let i=0;i<val.length;i++){
        if(Array.isArray(val[i]) && n>0){
            { n--;
            flat(val[i],n)}
        }
        else {
            res.push(val[i])
        }
    }}
    flat(this,n)
    console.log(res)
}
Array.prototype.flatten= flatten;

let arr =  [
 1,2,3,4,[5,6,[7,8,[2,3,4,[1,2,3]]]]
 ]
 arr.flatten(2);
 ---------------------------------------------------------------------------------------------------------
 
 IndexOf method : 
 
const customIndexOf = function(val,start=0){
let res=-1;
    for(let i=start;i<this.length;i++){
        if(this[i]===val){res = i; break;}
    }
    return res
}
Array.prototype.customIndexOf= customIndexOf;
let val= [1,2,1,3,4,5,6].customIndexOf(1,2)
console.log(val)
 
-----------------------------------------------------------------------------------------------------------
 
At method : 

function customAt (i){
    if(i>0 && i<this.length)
    return this[i]
    else if(i<0 && Math.abs(i)<this.length+1)
    return this[this.length-Math.abs(i)]
    else return this[i]
    
}
Array.prototype.customAt = customAt;
let val = [1,2,3,4,5].customAt(-2)
console.log(val)

------------------------------------------------------------------------------------------------------------

Map method : 

function customMap (callback){
    let res = [];
    let val;
    for(let i=0;i<this.length;i++){
        val = callback(this[i],i,this)
        res.push(val)
    }
    return res;
    }
Array.prototype.customMap= customMap;
const arr =[1,2,3,4,6]
let val = arr.customMap((elem,i,arr)=>{return elem+i})
console.log(val)
